export { ATTRIBUTE as ATTRIBUTE_SYNTAX, Statement as StatementSyntax, Expression as ExpressionSyntax, Attribute as AttributeSyntax, isAttribute } from './lib/syntax';
export { default as templateFactory } from './lib/template';
export { default as SymbolTable } from './lib/symbol-table';
export { NULL_REFERENCE, UNDEFINED_REFERENCE, PrimitiveReference, ConditionalReference } from './lib/references';
export { Blocks, OptimizedAppend, UnoptimizedAppend, Unknown, StaticAttr, DynamicAttr, Args as ArgsSyntax, NamedArgs as NamedArgsSyntax, PositionalArgs as PositionalArgsSyntax, Ref as RefSyntax, GetArgument as GetNamedParameterSyntax, Get as GetSyntax, Value as ValueSyntax, OpenElement, Helper as HelperSyntax, Block as BlockSyntax, OpenPrimitiveElement as OpenPrimitiveElementSyntax, CloseElement as CloseElementSyntax } from './lib/syntax/core';
export { default as OpcodeBuilderDSL } from './lib/compiled/opcodes/builder';
export { default as Compiler, CompileIntoList, compileLayout } from './lib/compiler';
export * from './lib/opcode-builder';
export { Block, CompiledBlock, Layout, InlineBlock, EntryPoint } from './lib/compiled/blocks';
export { AttributeManager as IAttributeManager, AttributeManager, PropertyManager, INPUT_VALUE_PROPERTY_MANAGER, defaultManagers, defaultAttributeManagers, defaultPropertyManagers, readDOMAttr } from './lib/dom/attribute-managers';
export { normalizeTextValue } from './lib/compiled/opcodes/content';
export { CompiledExpression } from './lib/compiled/expressions';
export { CompiledArgs, CompiledNamedArgs, CompiledPositionalArgs, EvaluatedArgs, EvaluatedNamedArgs, EvaluatedPositionalArgs } from './lib/compiled/expressions/args';
export * from './lib/compiled/expressions/function';
export { default as getDynamicVar } from './lib/helpers/get-dynamic-var';
export { default as WithDynamicVarsSyntax } from './lib/syntax/builtins/with-dynamic-vars';
export { default as InElementSyntax } from './lib/syntax/builtins/in-element';
export { UpdatingVM, RenderResult } from './lib/vm';
export { isSafeString } from './lib/upsert';
export { Scope, default as Environment } from './lib/environment';
export { PartialDefinition } from './lib/partial';
export { ComponentDefinition, isComponentDefinition } from './lib/component/interfaces';
export * from './lib/modifier/interfaces';
export { default as DOMChanges, DOMChanges as IDOMChanges, DOMTreeConstruction, isWhitespace, insertHTMLBefore } from './lib/dom/helper';
import * as Simple from './lib/dom/interfaces';
export { Simple };
export { ElementStack } from './lib/builder';
export { ConcreteBounds } from './lib/bounds';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJnbGltbWVyLXJ1bnRpbWUvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsU0FDRSxTQUFTLElBQUksZ0JBQWdCLEVBQzdCLFNBQVMsSUFBSSxlQUFlLEVBQzVCLFVBQVUsSUFBSSxnQkFBZ0IsRUFDOUIsU0FBUyxJQUFJLGVBQWUsRUFDNUIsMEJBQTBCLEVBQzFCLFlBQVksRUFDWixXQUFXLEVBQ1gsV0FBVyxRQUNOLGNBQWMsQ0FBQztBQUV0QixTQUFTLE9BQU8sSUFBSSxlQUFlLEVBQUUsZUFBZSxFQUFFLFFBQVEsUUFBUSxnQkFBZ0IsQ0FBQztBQUV2RixTQUFTLE9BQU8sSUFBSSxXQUFXLFFBQVEsb0JBQW9CLENBQUM7QUFFNUQsU0FBUyxjQUFjLEVBQUUsbUJBQW1CLEVBQUUsa0JBQWtCLEVBQUUsb0JBQW9CLFFBQVEsa0JBQWtCLENBQUM7QUFFakgsU0FDRSxNQUFNLEVBQ04sZUFBZSxFQUNmLGlCQUFpQixFQUNqQixPQUFPLEVBQ1AsVUFBVSxFQUNWLFdBQVcsRUFDWCxJQUFJLElBQUksVUFBVSxFQUNsQixTQUFTLElBQUksZUFBZSxFQUM1QixjQUFjLElBQUksb0JBQW9CLEVBQ3RDLEdBQUcsSUFBSSxTQUFTLEVBQ2hCLFdBQVcsSUFBSSx1QkFBdUIsRUFDdEMsR0FBRyxJQUFJLFNBQVMsRUFDaEIsS0FBSyxJQUFJLFdBQVcsRUFDcEIsV0FBVyxFQUNYLE1BQU0sSUFBSSxZQUFZLEVBQ3RCLEtBQUssSUFBSSxXQUFXLEVBQ3BCLG9CQUFvQixJQUFJLDBCQUEwQixFQUNsRCxZQUFZLElBQUksa0JBQWtCLFFBQzdCLG1CQUFtQixDQUFDO0FBRTNCLFNBQ0csT0FBTyxJQUFJLGdCQUFnQixRQUN2QixnQ0FBZ0MsQ0FBQztBQUV4QyxTQUNFLE9BQU8sSUFBSSxRQUFRLEVBQ25CLFVBQVUsRUFDVixlQUFlLEVBQ2YsYUFBYSxRQUNSLGdCQUFnQixDQUFDO0FBRXhCLFNBQ0UsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQixpQkFBaUIsUUFDWixzQkFBc0IsQ0FBQztBQUU5QixTQUNFLEtBQUssRUFDTCxhQUFhLEVBQ2IsTUFBTSxFQUNOLFdBQVcsRUFDWCxVQUFVLFFBQ0wsdUJBQXVCLENBQUM7QUFFL0IsU0FDRSxnQkFBZ0IsSUFBSSxpQkFBaUIsRUFDckMsZ0JBQWdCLEVBQ2hCLGVBQWUsRUFDZiw0QkFBNEIsRUFDNUIsZUFBZSxFQUNmLHdCQUF3QixFQUN4Qix1QkFBdUIsRUFDdkIsV0FBVyxRQUNOLDhCQUE4QixDQUFDO0FBRXRDLFNBQ0Usa0JBQWtCLFFBQ2IsZ0NBQWdDLENBQUM7QUFFeEMsU0FDRSxrQkFBa0IsUUFDYiw0QkFBNEIsQ0FBQztBQUVwQyxTQUNFLFlBQVksRUFDWixpQkFBaUIsRUFDakIsc0JBQXNCLEVBQ3RCLGFBQWEsRUFDYixrQkFBa0IsRUFDbEIsdUJBQXVCLFFBQ2xCLGlDQUFpQyxDQUFDO0FBRXpDLFNBQ0Usa0JBQWtCLFFBQ2IscUNBQXFDLENBQUM7QUFFN0MsU0FDRSxPQUFPLElBQUksYUFBYSxRQUNuQiwrQkFBK0IsQ0FBQztBQUV2QyxTQUNFLE9BQU8sSUFBSSxxQkFBcUIsUUFDM0IseUNBQXlDLENBQUM7QUFFakQsU0FDRSxPQUFPLElBQUksZUFBZSxRQUNyQixrQ0FBa0MsQ0FBQztBQUUxQyxTQUFTLFFBQVEsSUFBSSxFQUFFLEVBQUUsVUFBVSxFQUFFLFlBQVksUUFBUSxVQUFVLENBQUM7QUFFcEUsU0FBUyxVQUFVLEVBQUUsWUFBWSxRQUFRLGNBQWMsQ0FBQztBQUV4RCxTQUNFLEtBQUssRUFDTCxPQUFPLElBQUksV0FBVyxFQUN0QixNQUFNLEVBQ04sZUFBZSxFQUNmLFlBQVksUUFDUCxtQkFBbUIsQ0FBQztBQUUzQixTQUNFLGlCQUFpQixRQUNaLGVBQWUsQ0FBQztBQUV2QixTQUNFLFNBQVMsRUFDVCxjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLG1CQUFtQixFQUNuQixzQkFBc0IsRUFDdEIscUJBQXFCLEVBQ3JCLHFCQUFxQixRQUNoQiw0QkFBNEIsQ0FBQztBQUVwQyxTQUNFLGVBQWUsUUFDViwyQkFBMkIsQ0FBQztBQUVuQyxTQUFTLE9BQU8sSUFBSSxVQUFVLEVBQUUsVUFBVSxJQUFJLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxZQUFZLEVBQUUsZ0JBQWdCLFFBQVEsa0JBQWtCLENBQUM7T0FDakksS0FBSyxNQUFNLE1BQU0sc0JBQXNCO0FBQy9DLFNBQVMsTUFBTSxHQUFHO0FBQ2xCLFNBQVMsWUFBWSxFQUFFLGlCQUFpQixRQUFRLGVBQWUsQ0FBQztBQUNoRSxTQUFTLE9BQU8sSUFBSSxNQUFNLEVBQUUsY0FBYyxRQUFRLGNBQWMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7XG4gIEFUVFJJQlVURSBhcyBBVFRSSUJVVEVfU1lOVEFYLFxuICBTdGF0ZW1lbnQgYXMgU3RhdGVtZW50U3ludGF4LFxuICBFeHByZXNzaW9uIGFzIEV4cHJlc3Npb25TeW50YXgsXG4gIEF0dHJpYnV0ZSBhcyBBdHRyaWJ1dGVTeW50YXgsXG4gIFN0YXRlbWVudENvbXBpbGF0aW9uQnVmZmVyLFxuICBTeW1ib2xMb29rdXAsXG4gIENvbXBpbGVJbnRvLFxuICBpc0F0dHJpYnV0ZVxufSBmcm9tICcuL2xpYi9zeW50YXgnO1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIHRlbXBsYXRlRmFjdG9yeSwgVGVtcGxhdGVGYWN0b3J5LCBUZW1wbGF0ZSB9IGZyb20gJy4vbGliL3RlbXBsYXRlJztcblxuZXhwb3J0IHsgZGVmYXVsdCBhcyBTeW1ib2xUYWJsZSB9IGZyb20gJy4vbGliL3N5bWJvbC10YWJsZSc7XG5cbmV4cG9ydCB7IE5VTExfUkVGRVJFTkNFLCBVTkRFRklORURfUkVGRVJFTkNFLCBQcmltaXRpdmVSZWZlcmVuY2UsIENvbmRpdGlvbmFsUmVmZXJlbmNlIH0gZnJvbSAnLi9saWIvcmVmZXJlbmNlcyc7XG5cbmV4cG9ydCB7XG4gIEJsb2NrcyxcbiAgT3B0aW1pemVkQXBwZW5kLFxuICBVbm9wdGltaXplZEFwcGVuZCxcbiAgVW5rbm93bixcbiAgU3RhdGljQXR0cixcbiAgRHluYW1pY0F0dHIsXG4gIEFyZ3MgYXMgQXJnc1N5bnRheCxcbiAgTmFtZWRBcmdzIGFzIE5hbWVkQXJnc1N5bnRheCxcbiAgUG9zaXRpb25hbEFyZ3MgYXMgUG9zaXRpb25hbEFyZ3NTeW50YXgsXG4gIFJlZiBhcyBSZWZTeW50YXgsXG4gIEdldEFyZ3VtZW50IGFzIEdldE5hbWVkUGFyYW1ldGVyU3ludGF4LFxuICBHZXQgYXMgR2V0U3ludGF4LFxuICBWYWx1ZSBhcyBWYWx1ZVN5bnRheCxcbiAgT3BlbkVsZW1lbnQsXG4gIEhlbHBlciBhcyBIZWxwZXJTeW50YXgsXG4gIEJsb2NrIGFzIEJsb2NrU3ludGF4LFxuICBPcGVuUHJpbWl0aXZlRWxlbWVudCBhcyBPcGVuUHJpbWl0aXZlRWxlbWVudFN5bnRheCxcbiAgQ2xvc2VFbGVtZW50IGFzIENsb3NlRWxlbWVudFN5bnRheFxufSBmcm9tICcuL2xpYi9zeW50YXgvY29yZSc7XG5cbmV4cG9ydCB7XG4gICBkZWZhdWx0IGFzIE9wY29kZUJ1aWxkZXJEU0xcbn0gZnJvbSAnLi9saWIvY29tcGlsZWQvb3Bjb2Rlcy9idWlsZGVyJztcblxuZXhwb3J0IHtcbiAgZGVmYXVsdCBhcyBDb21waWxlcixcbiAgQ29tcGlsYWJsZSxcbiAgQ29tcGlsZUludG9MaXN0LFxuICBjb21waWxlTGF5b3V0XG59IGZyb20gJy4vbGliL2NvbXBpbGVyJztcblxuZXhwb3J0IHtcbiAgQ29tcG9uZW50QnVpbGRlcixcbiAgU3RhdGljRGVmaW5pdGlvbixcbiAgRHluYW1pY0RlZmluaXRpb25cbn0gZnJvbSAnLi9saWIvb3Bjb2RlLWJ1aWxkZXInO1xuXG5leHBvcnQge1xuICBCbG9jayxcbiAgQ29tcGlsZWRCbG9jayxcbiAgTGF5b3V0LFxuICBJbmxpbmVCbG9jayxcbiAgRW50cnlQb2ludFxufSBmcm9tICcuL2xpYi9jb21waWxlZC9ibG9ja3MnO1xuXG5leHBvcnQge1xuICBBdHRyaWJ1dGVNYW5hZ2VyIGFzIElBdHRyaWJ1dGVNYW5hZ2VyLFxuICBBdHRyaWJ1dGVNYW5hZ2VyLFxuICBQcm9wZXJ0eU1hbmFnZXIsXG4gIElOUFVUX1ZBTFVFX1BST1BFUlRZX01BTkFHRVIsXG4gIGRlZmF1bHRNYW5hZ2VycyxcbiAgZGVmYXVsdEF0dHJpYnV0ZU1hbmFnZXJzLFxuICBkZWZhdWx0UHJvcGVydHlNYW5hZ2VycyxcbiAgcmVhZERPTUF0dHJcbn0gZnJvbSAnLi9saWIvZG9tL2F0dHJpYnV0ZS1tYW5hZ2Vycyc7XG5cbmV4cG9ydCB7XG4gIG5vcm1hbGl6ZVRleHRWYWx1ZVxufSBmcm9tICcuL2xpYi9jb21waWxlZC9vcGNvZGVzL2NvbnRlbnQnO1xuXG5leHBvcnQge1xuICBDb21waWxlZEV4cHJlc3Npb25cbn0gZnJvbSAnLi9saWIvY29tcGlsZWQvZXhwcmVzc2lvbnMnO1xuXG5leHBvcnQge1xuICBDb21waWxlZEFyZ3MsXG4gIENvbXBpbGVkTmFtZWRBcmdzLFxuICBDb21waWxlZFBvc2l0aW9uYWxBcmdzLFxuICBFdmFsdWF0ZWRBcmdzLFxuICBFdmFsdWF0ZWROYW1lZEFyZ3MsXG4gIEV2YWx1YXRlZFBvc2l0aW9uYWxBcmdzXG59IGZyb20gJy4vbGliL2NvbXBpbGVkL2V4cHJlc3Npb25zL2FyZ3MnO1xuXG5leHBvcnQge1xuICBGdW5jdGlvbkV4cHJlc3Npb25cbn0gZnJvbSAnLi9saWIvY29tcGlsZWQvZXhwcmVzc2lvbnMvZnVuY3Rpb24nO1xuXG5leHBvcnQge1xuICBkZWZhdWx0IGFzIGdldER5bmFtaWNWYXJcbn0gZnJvbSAnLi9saWIvaGVscGVycy9nZXQtZHluYW1pYy12YXInO1xuXG5leHBvcnQge1xuICBkZWZhdWx0IGFzIFdpdGhEeW5hbWljVmFyc1N5bnRheFxufSBmcm9tICcuL2xpYi9zeW50YXgvYnVpbHRpbnMvd2l0aC1keW5hbWljLXZhcnMnO1xuXG5leHBvcnQge1xuICBkZWZhdWx0IGFzIEluRWxlbWVudFN5bnRheFxufSBmcm9tICcuL2xpYi9zeW50YXgvYnVpbHRpbnMvaW4tZWxlbWVudCc7XG5cbmV4cG9ydCB7IFB1YmxpY1ZNIGFzIFZNLCBVcGRhdGluZ1ZNLCBSZW5kZXJSZXN1bHQgfSBmcm9tICcuL2xpYi92bSc7XG5cbmV4cG9ydCB7IFNhZmVTdHJpbmcsIGlzU2FmZVN0cmluZyB9IGZyb20gJy4vbGliL3Vwc2VydCc7XG5cbmV4cG9ydCB7XG4gIFNjb3BlLFxuICBkZWZhdWx0IGFzIEVudmlyb25tZW50LFxuICBIZWxwZXIsXG4gIFBhcnNlZFN0YXRlbWVudCxcbiAgRHluYW1pY1Njb3BlLFxufSBmcm9tICcuL2xpYi9lbnZpcm9ubWVudCc7XG5cbmV4cG9ydCB7XG4gIFBhcnRpYWxEZWZpbml0aW9uXG59IGZyb20gJy4vbGliL3BhcnRpYWwnO1xuXG5leHBvcnQge1xuICBDb21wb25lbnQsXG4gIENvbXBvbmVudENsYXNzLFxuICBDb21wb25lbnRNYW5hZ2VyLFxuICBDb21wb25lbnREZWZpbml0aW9uLFxuICBDb21wb25lbnRMYXlvdXRCdWlsZGVyLFxuICBDb21wb25lbnRBdHRyc0J1aWxkZXIsXG4gIGlzQ29tcG9uZW50RGVmaW5pdGlvblxufSBmcm9tICcuL2xpYi9jb21wb25lbnQvaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCB7XG4gIE1vZGlmaWVyTWFuYWdlclxufSBmcm9tICcuL2xpYi9tb2RpZmllci9pbnRlcmZhY2VzJztcblxuZXhwb3J0IHsgZGVmYXVsdCBhcyBET01DaGFuZ2VzLCBET01DaGFuZ2VzIGFzIElET01DaGFuZ2VzLCBET01UcmVlQ29uc3RydWN0aW9uLCBpc1doaXRlc3BhY2UsIGluc2VydEhUTUxCZWZvcmUgfSBmcm9tICcuL2xpYi9kb20vaGVscGVyJztcbmltcG9ydCAgKiBhcyBTaW1wbGUgZnJvbSAnLi9saWIvZG9tL2ludGVyZmFjZXMnO1xuZXhwb3J0IHsgU2ltcGxlIH07XG5leHBvcnQgeyBFbGVtZW50U3RhY2ssIEVsZW1lbnRPcGVyYXRpb25zIH0gZnJvbSAnLi9saWIvYnVpbGRlcic7XG5leHBvcnQgeyBkZWZhdWx0IGFzIEJvdW5kcywgQ29uY3JldGVCb3VuZHMgfSBmcm9tICcuL2xpYi9ib3VuZHMnO1xuIl19